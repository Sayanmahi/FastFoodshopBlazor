@page "/users/register"
@inject IClient httpClient
@inject NavigationManager navManager
<h3>Register for New User</h3>
@if(string.IsNullOrEmpty(message)==false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <lable for="email">Email Adddress</lable>
            <InputText class="form-control" @bind-Value="@RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <lable for="text">Name</lable>
            <InputText class="form-control" @bind-Value="@RegistrationModel.Name" />
            <ValidationMessage For="@(() => RegistrationModel.Name)" />
        </div>
        <div class="form-group">
            <lable for="password">Password</lable>
            <InputText class="form-control" type="password" @bind-Value="@RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>
        <div class="form-group">
            <lable for="text">Phone Number</lable>
            <InputText class="form-control" @bind-Value="@RegistrationModel.PhoneNumber" />
            <ValidationMessage For="@(() => RegistrationModel.PhoneNumber)" />
        </div>
        <button class="btn btn-success" type="submit">Register</button>


    </EditForm>
</div>

@code {
    User RegistrationModel = new User();
    string message = string.Empty;
    private async Task HandleRegistration()
    {
        RegistrationModel.UserType = "User";
        try
        {
            await httpClient.RegisterrAsync(RegistrationModel);
            navManager.NavigateTo("/users/login");
        }catch(ApiException e)
        {
            message = e.Message;

        }catch(Exception e)
        {
            message = e.Message;
        }
    }

}
